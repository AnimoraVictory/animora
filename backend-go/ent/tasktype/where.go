// Code generated by ent, DO NOT EDIT.

package tasktype

import (
	"entgo.io/ent/dialect/sql"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	pgvector "github.com/pgvector/pgvector-go"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TaskType {
	return predicate.TaskType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TaskType {
	return predicate.TaskType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TaskType {
	return predicate.TaskType(sql.FieldLTE(FieldID, id))
}

// TextFeature applies equality check predicate on the "text_feature" field. It's identical to TextFeatureEQ.
func TextFeature(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldEQ(FieldTextFeature, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.TaskType {
	return predicate.TaskType(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.TaskType {
	return predicate.TaskType(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.TaskType {
	return predicate.TaskType(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.TaskType {
	return predicate.TaskType(sql.FieldNotIn(FieldType, vs...))
}

// TextFeatureEQ applies the EQ predicate on the "text_feature" field.
func TextFeatureEQ(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldEQ(FieldTextFeature, v))
}

// TextFeatureNEQ applies the NEQ predicate on the "text_feature" field.
func TextFeatureNEQ(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldNEQ(FieldTextFeature, v))
}

// TextFeatureIn applies the In predicate on the "text_feature" field.
func TextFeatureIn(vs ...pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldIn(FieldTextFeature, vs...))
}

// TextFeatureNotIn applies the NotIn predicate on the "text_feature" field.
func TextFeatureNotIn(vs ...pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldNotIn(FieldTextFeature, vs...))
}

// TextFeatureGT applies the GT predicate on the "text_feature" field.
func TextFeatureGT(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldGT(FieldTextFeature, v))
}

// TextFeatureGTE applies the GTE predicate on the "text_feature" field.
func TextFeatureGTE(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldGTE(FieldTextFeature, v))
}

// TextFeatureLT applies the LT predicate on the "text_feature" field.
func TextFeatureLT(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldLT(FieldTextFeature, v))
}

// TextFeatureLTE applies the LTE predicate on the "text_feature" field.
func TextFeatureLTE(v pgvector.Vector) predicate.TaskType {
	return predicate.TaskType(sql.FieldLTE(FieldTextFeature, v))
}

// TextFeatureIsNil applies the IsNil predicate on the "text_feature" field.
func TextFeatureIsNil() predicate.TaskType {
	return predicate.TaskType(sql.FieldIsNull(FieldTextFeature))
}

// TextFeatureNotNil applies the NotNil predicate on the "text_feature" field.
func TextFeatureNotNil() predicate.TaskType {
	return predicate.TaskType(sql.FieldNotNull(FieldTextFeature))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskType) predicate.TaskType {
	return predicate.TaskType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskType) predicate.TaskType {
	return predicate.TaskType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskType) predicate.TaskType {
	return predicate.TaskType(sql.NotPredicates(p))
}
