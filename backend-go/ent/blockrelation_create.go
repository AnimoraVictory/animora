// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/blockrelation"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// BlockRelationCreate is the builder for creating a BlockRelation entity.
type BlockRelationCreate struct {
	config
	mutation *BlockRelationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (brc *BlockRelationCreate) SetCreatedAt(t time.Time) *BlockRelationCreate {
	brc.mutation.SetCreatedAt(t)
	return brc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (brc *BlockRelationCreate) SetNillableCreatedAt(t *time.Time) *BlockRelationCreate {
	if t != nil {
		brc.SetCreatedAt(*t)
	}
	return brc
}

// SetID sets the "id" field.
func (brc *BlockRelationCreate) SetID(u uuid.UUID) *BlockRelationCreate {
	brc.mutation.SetID(u)
	return brc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (brc *BlockRelationCreate) SetNillableID(u *uuid.UUID) *BlockRelationCreate {
	if u != nil {
		brc.SetID(*u)
	}
	return brc
}

// SetFromID sets the "from" edge to the User entity by ID.
func (brc *BlockRelationCreate) SetFromID(id uuid.UUID) *BlockRelationCreate {
	brc.mutation.SetFromID(id)
	return brc
}

// SetFrom sets the "from" edge to the User entity.
func (brc *BlockRelationCreate) SetFrom(u *User) *BlockRelationCreate {
	return brc.SetFromID(u.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (brc *BlockRelationCreate) SetToID(id uuid.UUID) *BlockRelationCreate {
	brc.mutation.SetToID(id)
	return brc
}

// SetTo sets the "to" edge to the User entity.
func (brc *BlockRelationCreate) SetTo(u *User) *BlockRelationCreate {
	return brc.SetToID(u.ID)
}

// Mutation returns the BlockRelationMutation object of the builder.
func (brc *BlockRelationCreate) Mutation() *BlockRelationMutation {
	return brc.mutation
}

// Save creates the BlockRelation in the database.
func (brc *BlockRelationCreate) Save(ctx context.Context) (*BlockRelation, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BlockRelationCreate) SaveX(ctx context.Context) *BlockRelation {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BlockRelationCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BlockRelationCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BlockRelationCreate) defaults() {
	if _, ok := brc.mutation.CreatedAt(); !ok {
		v := blockrelation.DefaultCreatedAt()
		brc.mutation.SetCreatedAt(v)
	}
	if _, ok := brc.mutation.ID(); !ok {
		v := blockrelation.DefaultID()
		brc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BlockRelationCreate) check() error {
	if _, ok := brc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BlockRelation.created_at"`)}
	}
	if len(brc.mutation.FromIDs()) == 0 {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required edge "BlockRelation.from"`)}
	}
	if len(brc.mutation.ToIDs()) == 0 {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required edge "BlockRelation.to"`)}
	}
	return nil
}

func (brc *BlockRelationCreate) sqlSave(ctx context.Context) (*BlockRelation, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BlockRelationCreate) createSpec() (*BlockRelation, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockRelation{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(blockrelation.Table, sqlgraph.NewFieldSpec(blockrelation.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = brc.conflict
	if id, ok := brc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := brc.mutation.CreatedAt(); ok {
		_spec.SetField(blockrelation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := brc.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.FromTable,
			Columns: []string{blockrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_blocking = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.ToTable,
			Columns: []string{blockrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_blocked_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockRelation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockRelationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (brc *BlockRelationCreate) OnConflict(opts ...sql.ConflictOption) *BlockRelationUpsertOne {
	brc.conflict = opts
	return &BlockRelationUpsertOne{
		create: brc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (brc *BlockRelationCreate) OnConflictColumns(columns ...string) *BlockRelationUpsertOne {
	brc.conflict = append(brc.conflict, sql.ConflictColumns(columns...))
	return &BlockRelationUpsertOne{
		create: brc,
	}
}

type (
	// BlockRelationUpsertOne is the builder for "upsert"-ing
	//  one BlockRelation node.
	BlockRelationUpsertOne struct {
		create *BlockRelationCreate
	}

	// BlockRelationUpsert is the "OnConflict" setter.
	BlockRelationUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *BlockRelationUpsert) SetCreatedAt(v time.Time) *BlockRelationUpsert {
	u.Set(blockrelation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockRelationUpsert) UpdateCreatedAt() *BlockRelationUpsert {
	u.SetExcluded(blockrelation.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockrelation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockRelationUpsertOne) UpdateNewValues() *BlockRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(blockrelation.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BlockRelationUpsertOne) Ignore() *BlockRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockRelationUpsertOne) DoNothing() *BlockRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockRelationCreate.OnConflict
// documentation for more info.
func (u *BlockRelationUpsertOne) Update(set func(*BlockRelationUpsert)) *BlockRelationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockRelationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockRelationUpsertOne) SetCreatedAt(v time.Time) *BlockRelationUpsertOne {
	return u.Update(func(s *BlockRelationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockRelationUpsertOne) UpdateCreatedAt() *BlockRelationUpsertOne {
	return u.Update(func(s *BlockRelationUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *BlockRelationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockRelationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockRelationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BlockRelationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BlockRelationUpsertOne.ID is not supported by MySQL driver. Use BlockRelationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BlockRelationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BlockRelationCreateBulk is the builder for creating many BlockRelation entities in bulk.
type BlockRelationCreateBulk struct {
	config
	err      error
	builders []*BlockRelationCreate
	conflict []sql.ConflictOption
}

// Save creates the BlockRelation entities in the database.
func (brcb *BlockRelationCreateBulk) Save(ctx context.Context) ([]*BlockRelation, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BlockRelation, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockRelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = brcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BlockRelationCreateBulk) SaveX(ctx context.Context) []*BlockRelation {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BlockRelationCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BlockRelationCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BlockRelation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BlockRelationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (brcb *BlockRelationCreateBulk) OnConflict(opts ...sql.ConflictOption) *BlockRelationUpsertBulk {
	brcb.conflict = opts
	return &BlockRelationUpsertBulk{
		create: brcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (brcb *BlockRelationCreateBulk) OnConflictColumns(columns ...string) *BlockRelationUpsertBulk {
	brcb.conflict = append(brcb.conflict, sql.ConflictColumns(columns...))
	return &BlockRelationUpsertBulk{
		create: brcb,
	}
}

// BlockRelationUpsertBulk is the builder for "upsert"-ing
// a bulk of BlockRelation nodes.
type BlockRelationUpsertBulk struct {
	create *BlockRelationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(blockrelation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BlockRelationUpsertBulk) UpdateNewValues() *BlockRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(blockrelation.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BlockRelation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BlockRelationUpsertBulk) Ignore() *BlockRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BlockRelationUpsertBulk) DoNothing() *BlockRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BlockRelationCreateBulk.OnConflict
// documentation for more info.
func (u *BlockRelationUpsertBulk) Update(set func(*BlockRelationUpsert)) *BlockRelationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BlockRelationUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BlockRelationUpsertBulk) SetCreatedAt(v time.Time) *BlockRelationUpsertBulk {
	return u.Update(func(s *BlockRelationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BlockRelationUpsertBulk) UpdateCreatedAt() *BlockRelationUpsertBulk {
	return u.Update(func(s *BlockRelationUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *BlockRelationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BlockRelationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BlockRelationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BlockRelationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
