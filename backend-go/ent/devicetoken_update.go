// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/devicetoken"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// DeviceTokenUpdate is the builder for updating DeviceToken entities.
type DeviceTokenUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceTokenMutation
}

// Where appends a list predicates to the DeviceTokenUpdate builder.
func (dtu *DeviceTokenUpdate) Where(ps ...predicate.DeviceToken) *DeviceTokenUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetUserID sets the "user_id" field.
func (dtu *DeviceTokenUpdate) SetUserID(u uuid.UUID) *DeviceTokenUpdate {
	dtu.mutation.SetUserID(u)
	return dtu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableUserID(u *uuid.UUID) *DeviceTokenUpdate {
	if u != nil {
		dtu.SetUserID(*u)
	}
	return dtu
}

// SetDeviceID sets the "device_id" field.
func (dtu *DeviceTokenUpdate) SetDeviceID(s string) *DeviceTokenUpdate {
	dtu.mutation.SetDeviceID(s)
	return dtu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableDeviceID(s *string) *DeviceTokenUpdate {
	if s != nil {
		dtu.SetDeviceID(*s)
	}
	return dtu
}

// SetToken sets the "token" field.
func (dtu *DeviceTokenUpdate) SetToken(s string) *DeviceTokenUpdate {
	dtu.mutation.SetToken(s)
	return dtu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableToken(s *string) *DeviceTokenUpdate {
	if s != nil {
		dtu.SetToken(*s)
	}
	return dtu
}

// SetPlatform sets the "platform" field.
func (dtu *DeviceTokenUpdate) SetPlatform(s string) *DeviceTokenUpdate {
	dtu.mutation.SetPlatform(s)
	return dtu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillablePlatform(s *string) *DeviceTokenUpdate {
	if s != nil {
		dtu.SetPlatform(*s)
	}
	return dtu
}

// SetCreatedAt sets the "created_at" field.
func (dtu *DeviceTokenUpdate) SetCreatedAt(t time.Time) *DeviceTokenUpdate {
	dtu.mutation.SetCreatedAt(t)
	return dtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtu *DeviceTokenUpdate) SetNillableCreatedAt(t *time.Time) *DeviceTokenUpdate {
	if t != nil {
		dtu.SetCreatedAt(*t)
	}
	return dtu
}

// SetUpdatedAt sets the "updated_at" field.
func (dtu *DeviceTokenUpdate) SetUpdatedAt(t time.Time) *DeviceTokenUpdate {
	dtu.mutation.SetUpdatedAt(t)
	return dtu
}

// SetUser sets the "user" edge to the User entity.
func (dtu *DeviceTokenUpdate) SetUser(u *User) *DeviceTokenUpdate {
	return dtu.SetUserID(u.ID)
}

// Mutation returns the DeviceTokenMutation object of the builder.
func (dtu *DeviceTokenUpdate) Mutation() *DeviceTokenMutation {
	return dtu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dtu *DeviceTokenUpdate) ClearUser() *DeviceTokenUpdate {
	dtu.mutation.ClearUser()
	return dtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DeviceTokenUpdate) Save(ctx context.Context) (int, error) {
	dtu.defaults()
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DeviceTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DeviceTokenUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DeviceTokenUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtu *DeviceTokenUpdate) defaults() {
	if _, ok := dtu.mutation.UpdatedAt(); !ok {
		v := devicetoken.UpdateDefaultUpdatedAt()
		dtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtu *DeviceTokenUpdate) check() error {
	if v, ok := dtu.mutation.DeviceID(); ok {
		if err := devicetoken.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.device_id": %w`, err)}
		}
	}
	if v, ok := dtu.mutation.Token(); ok {
		if err := devicetoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.token": %w`, err)}
		}
	}
	if v, ok := dtu.mutation.Platform(); ok {
		if err := devicetoken.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.platform": %w`, err)}
		}
	}
	if dtu.mutation.UserCleared() && len(dtu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeviceToken.user"`)
	}
	return nil
}

func (dtu *DeviceTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicetoken.Table, devicetoken.Columns, sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.DeviceID(); ok {
		_spec.SetField(devicetoken.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := dtu.mutation.Token(); ok {
		_spec.SetField(devicetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := dtu.mutation.Platform(); ok {
		_spec.SetField(devicetoken.FieldPlatform, field.TypeString, value)
	}
	if value, ok := dtu.mutation.CreatedAt(); ok {
		_spec.SetField(devicetoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dtu.mutation.UpdatedAt(); ok {
		_spec.SetField(devicetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if dtu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicetoken.UserTable,
			Columns: []string{devicetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicetoken.UserTable,
			Columns: []string{devicetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DeviceTokenUpdateOne is the builder for updating a single DeviceToken entity.
type DeviceTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceTokenMutation
}

// SetUserID sets the "user_id" field.
func (dtuo *DeviceTokenUpdateOne) SetUserID(u uuid.UUID) *DeviceTokenUpdateOne {
	dtuo.mutation.SetUserID(u)
	return dtuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableUserID(u *uuid.UUID) *DeviceTokenUpdateOne {
	if u != nil {
		dtuo.SetUserID(*u)
	}
	return dtuo
}

// SetDeviceID sets the "device_id" field.
func (dtuo *DeviceTokenUpdateOne) SetDeviceID(s string) *DeviceTokenUpdateOne {
	dtuo.mutation.SetDeviceID(s)
	return dtuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableDeviceID(s *string) *DeviceTokenUpdateOne {
	if s != nil {
		dtuo.SetDeviceID(*s)
	}
	return dtuo
}

// SetToken sets the "token" field.
func (dtuo *DeviceTokenUpdateOne) SetToken(s string) *DeviceTokenUpdateOne {
	dtuo.mutation.SetToken(s)
	return dtuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableToken(s *string) *DeviceTokenUpdateOne {
	if s != nil {
		dtuo.SetToken(*s)
	}
	return dtuo
}

// SetPlatform sets the "platform" field.
func (dtuo *DeviceTokenUpdateOne) SetPlatform(s string) *DeviceTokenUpdateOne {
	dtuo.mutation.SetPlatform(s)
	return dtuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillablePlatform(s *string) *DeviceTokenUpdateOne {
	if s != nil {
		dtuo.SetPlatform(*s)
	}
	return dtuo
}

// SetCreatedAt sets the "created_at" field.
func (dtuo *DeviceTokenUpdateOne) SetCreatedAt(t time.Time) *DeviceTokenUpdateOne {
	dtuo.mutation.SetCreatedAt(t)
	return dtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtuo *DeviceTokenUpdateOne) SetNillableCreatedAt(t *time.Time) *DeviceTokenUpdateOne {
	if t != nil {
		dtuo.SetCreatedAt(*t)
	}
	return dtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dtuo *DeviceTokenUpdateOne) SetUpdatedAt(t time.Time) *DeviceTokenUpdateOne {
	dtuo.mutation.SetUpdatedAt(t)
	return dtuo
}

// SetUser sets the "user" edge to the User entity.
func (dtuo *DeviceTokenUpdateOne) SetUser(u *User) *DeviceTokenUpdateOne {
	return dtuo.SetUserID(u.ID)
}

// Mutation returns the DeviceTokenMutation object of the builder.
func (dtuo *DeviceTokenUpdateOne) Mutation() *DeviceTokenMutation {
	return dtuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dtuo *DeviceTokenUpdateOne) ClearUser() *DeviceTokenUpdateOne {
	dtuo.mutation.ClearUser()
	return dtuo
}

// Where appends a list predicates to the DeviceTokenUpdate builder.
func (dtuo *DeviceTokenUpdateOne) Where(ps ...predicate.DeviceToken) *DeviceTokenUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DeviceTokenUpdateOne) Select(field string, fields ...string) *DeviceTokenUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DeviceToken entity.
func (dtuo *DeviceTokenUpdateOne) Save(ctx context.Context) (*DeviceToken, error) {
	dtuo.defaults()
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DeviceTokenUpdateOne) SaveX(ctx context.Context) *DeviceToken {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DeviceTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DeviceTokenUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtuo *DeviceTokenUpdateOne) defaults() {
	if _, ok := dtuo.mutation.UpdatedAt(); !ok {
		v := devicetoken.UpdateDefaultUpdatedAt()
		dtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtuo *DeviceTokenUpdateOne) check() error {
	if v, ok := dtuo.mutation.DeviceID(); ok {
		if err := devicetoken.DeviceIDValidator(v); err != nil {
			return &ValidationError{Name: "device_id", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.device_id": %w`, err)}
		}
	}
	if v, ok := dtuo.mutation.Token(); ok {
		if err := devicetoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.token": %w`, err)}
		}
	}
	if v, ok := dtuo.mutation.Platform(); ok {
		if err := devicetoken.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "DeviceToken.platform": %w`, err)}
		}
	}
	if dtuo.mutation.UserCleared() && len(dtuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeviceToken.user"`)
	}
	return nil
}

func (dtuo *DeviceTokenUpdateOne) sqlSave(ctx context.Context) (_node *DeviceToken, err error) {
	if err := dtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(devicetoken.Table, devicetoken.Columns, sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeviceToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, devicetoken.FieldID)
		for _, f := range fields {
			if !devicetoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != devicetoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.DeviceID(); ok {
		_spec.SetField(devicetoken.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.Token(); ok {
		_spec.SetField(devicetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.Platform(); ok {
		_spec.SetField(devicetoken.FieldPlatform, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.CreatedAt(); ok {
		_spec.SetField(devicetoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(devicetoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if dtuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicetoken.UserTable,
			Columns: []string{devicetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   devicetoken.UserTable,
			Columns: []string{devicetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeviceToken{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{devicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
