// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/aki-13627/animalia/backend-go/ent/blockrelation"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// BlockRelation is the model entity for the BlockRelation schema.
type BlockRelation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockRelationQuery when eager-loading is set.
	Edges           BlockRelationEdges `json:"edges"`
	user_blocking   *uuid.UUID
	user_blocked_by *uuid.UUID
	selectValues    sql.SelectValues
}

// BlockRelationEdges holds the relations/edges for other nodes in the graph.
type BlockRelationEdges struct {
	// From holds the value of the from edge.
	From *User `json:"from,omitempty"`
	// To holds the value of the to edge.
	To *User `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockRelationEdges) FromOrErr() (*User, error) {
	if e.From != nil {
		return e.From, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockRelationEdges) ToOrErr() (*User, error) {
	if e.To != nil {
		return e.To, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockRelation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockrelation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case blockrelation.FieldID:
			values[i] = new(uuid.UUID)
		case blockrelation.ForeignKeys[0]: // user_blocking
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case blockrelation.ForeignKeys[1]: // user_blocked_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockRelation fields.
func (br *BlockRelation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockrelation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				br.ID = *value
			}
		case blockrelation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				br.CreatedAt = value.Time
			}
		case blockrelation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_blocking", values[i])
			} else if value.Valid {
				br.user_blocking = new(uuid.UUID)
				*br.user_blocking = *value.S.(*uuid.UUID)
			}
		case blockrelation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_blocked_by", values[i])
			} else if value.Valid {
				br.user_blocked_by = new(uuid.UUID)
				*br.user_blocked_by = *value.S.(*uuid.UUID)
			}
		default:
			br.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BlockRelation.
// This includes values selected through modifiers, order, etc.
func (br *BlockRelation) Value(name string) (ent.Value, error) {
	return br.selectValues.Get(name)
}

// QueryFrom queries the "from" edge of the BlockRelation entity.
func (br *BlockRelation) QueryFrom() *UserQuery {
	return NewBlockRelationClient(br.config).QueryFrom(br)
}

// QueryTo queries the "to" edge of the BlockRelation entity.
func (br *BlockRelation) QueryTo() *UserQuery {
	return NewBlockRelationClient(br.config).QueryTo(br)
}

// Update returns a builder for updating this BlockRelation.
// Note that you need to call BlockRelation.Unwrap() before calling this method if this BlockRelation
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BlockRelation) Update() *BlockRelationUpdateOne {
	return NewBlockRelationClient(br.config).UpdateOne(br)
}

// Unwrap unwraps the BlockRelation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BlockRelation) Unwrap() *BlockRelation {
	_tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockRelation is not a transactional entity")
	}
	br.config.driver = _tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BlockRelation) String() string {
	var builder strings.Builder
	builder.WriteString("BlockRelation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", br.ID))
	builder.WriteString("created_at=")
	builder.WriteString(br.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BlockRelations is a parsable slice of BlockRelation.
type BlockRelations []*BlockRelation
