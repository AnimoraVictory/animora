// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aki-13627/animalia/backend-go/ent/blockrelation"
	"github.com/aki-13627/animalia/backend-go/ent/predicate"
	"github.com/aki-13627/animalia/backend-go/ent/user"
	"github.com/google/uuid"
)

// BlockRelationUpdate is the builder for updating BlockRelation entities.
type BlockRelationUpdate struct {
	config
	hooks    []Hook
	mutation *BlockRelationMutation
}

// Where appends a list predicates to the BlockRelationUpdate builder.
func (bru *BlockRelationUpdate) Where(ps ...predicate.BlockRelation) *BlockRelationUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetCreatedAt sets the "created_at" field.
func (bru *BlockRelationUpdate) SetCreatedAt(t time.Time) *BlockRelationUpdate {
	bru.mutation.SetCreatedAt(t)
	return bru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bru *BlockRelationUpdate) SetNillableCreatedAt(t *time.Time) *BlockRelationUpdate {
	if t != nil {
		bru.SetCreatedAt(*t)
	}
	return bru
}

// SetFromID sets the "from" edge to the User entity by ID.
func (bru *BlockRelationUpdate) SetFromID(id uuid.UUID) *BlockRelationUpdate {
	bru.mutation.SetFromID(id)
	return bru
}

// SetFrom sets the "from" edge to the User entity.
func (bru *BlockRelationUpdate) SetFrom(u *User) *BlockRelationUpdate {
	return bru.SetFromID(u.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (bru *BlockRelationUpdate) SetToID(id uuid.UUID) *BlockRelationUpdate {
	bru.mutation.SetToID(id)
	return bru
}

// SetTo sets the "to" edge to the User entity.
func (bru *BlockRelationUpdate) SetTo(u *User) *BlockRelationUpdate {
	return bru.SetToID(u.ID)
}

// Mutation returns the BlockRelationMutation object of the builder.
func (bru *BlockRelationUpdate) Mutation() *BlockRelationMutation {
	return bru.mutation
}

// ClearFrom clears the "from" edge to the User entity.
func (bru *BlockRelationUpdate) ClearFrom() *BlockRelationUpdate {
	bru.mutation.ClearFrom()
	return bru
}

// ClearTo clears the "to" edge to the User entity.
func (bru *BlockRelationUpdate) ClearTo() *BlockRelationUpdate {
	bru.mutation.ClearTo()
	return bru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BlockRelationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BlockRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BlockRelationUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BlockRelationUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BlockRelationUpdate) check() error {
	if bru.mutation.FromCleared() && len(bru.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockRelation.from"`)
	}
	if bru.mutation.ToCleared() && len(bru.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockRelation.to"`)
	}
	return nil
}

func (bru *BlockRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockrelation.Table, blockrelation.Columns, sqlgraph.NewFieldSpec(blockrelation.FieldID, field.TypeUUID))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.CreatedAt(); ok {
		_spec.SetField(blockrelation.FieldCreatedAt, field.TypeTime, value)
	}
	if bru.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.FromTable,
			Columns: []string{blockrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.FromTable,
			Columns: []string{blockrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.ToTable,
			Columns: []string{blockrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.ToTable,
			Columns: []string{blockrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BlockRelationUpdateOne is the builder for updating a single BlockRelation entity.
type BlockRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockRelationMutation
}

// SetCreatedAt sets the "created_at" field.
func (bruo *BlockRelationUpdateOne) SetCreatedAt(t time.Time) *BlockRelationUpdateOne {
	bruo.mutation.SetCreatedAt(t)
	return bruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bruo *BlockRelationUpdateOne) SetNillableCreatedAt(t *time.Time) *BlockRelationUpdateOne {
	if t != nil {
		bruo.SetCreatedAt(*t)
	}
	return bruo
}

// SetFromID sets the "from" edge to the User entity by ID.
func (bruo *BlockRelationUpdateOne) SetFromID(id uuid.UUID) *BlockRelationUpdateOne {
	bruo.mutation.SetFromID(id)
	return bruo
}

// SetFrom sets the "from" edge to the User entity.
func (bruo *BlockRelationUpdateOne) SetFrom(u *User) *BlockRelationUpdateOne {
	return bruo.SetFromID(u.ID)
}

// SetToID sets the "to" edge to the User entity by ID.
func (bruo *BlockRelationUpdateOne) SetToID(id uuid.UUID) *BlockRelationUpdateOne {
	bruo.mutation.SetToID(id)
	return bruo
}

// SetTo sets the "to" edge to the User entity.
func (bruo *BlockRelationUpdateOne) SetTo(u *User) *BlockRelationUpdateOne {
	return bruo.SetToID(u.ID)
}

// Mutation returns the BlockRelationMutation object of the builder.
func (bruo *BlockRelationUpdateOne) Mutation() *BlockRelationMutation {
	return bruo.mutation
}

// ClearFrom clears the "from" edge to the User entity.
func (bruo *BlockRelationUpdateOne) ClearFrom() *BlockRelationUpdateOne {
	bruo.mutation.ClearFrom()
	return bruo
}

// ClearTo clears the "to" edge to the User entity.
func (bruo *BlockRelationUpdateOne) ClearTo() *BlockRelationUpdateOne {
	bruo.mutation.ClearTo()
	return bruo
}

// Where appends a list predicates to the BlockRelationUpdate builder.
func (bruo *BlockRelationUpdateOne) Where(ps ...predicate.BlockRelation) *BlockRelationUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BlockRelationUpdateOne) Select(field string, fields ...string) *BlockRelationUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BlockRelation entity.
func (bruo *BlockRelationUpdateOne) Save(ctx context.Context) (*BlockRelation, error) {
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BlockRelationUpdateOne) SaveX(ctx context.Context) *BlockRelation {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BlockRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BlockRelationUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BlockRelationUpdateOne) check() error {
	if bruo.mutation.FromCleared() && len(bruo.mutation.FromIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockRelation.from"`)
	}
	if bruo.mutation.ToCleared() && len(bruo.mutation.ToIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BlockRelation.to"`)
	}
	return nil
}

func (bruo *BlockRelationUpdateOne) sqlSave(ctx context.Context) (_node *BlockRelation, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blockrelation.Table, blockrelation.Columns, sqlgraph.NewFieldSpec(blockrelation.FieldID, field.TypeUUID))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockrelation.FieldID)
		for _, f := range fields {
			if !blockrelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockrelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.CreatedAt(); ok {
		_spec.SetField(blockrelation.FieldCreatedAt, field.TypeTime, value)
	}
	if bruo.mutation.FromCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.FromTable,
			Columns: []string{blockrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.FromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.FromTable,
			Columns: []string{blockrelation.FromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.ToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.ToTable,
			Columns: []string{blockrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.ToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockrelation.ToTable,
			Columns: []string{blockrelation.ToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockRelation{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockrelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
