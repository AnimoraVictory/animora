"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendStack = void 0;
const cdk = require("aws-cdk-lib");
const dotenv = require("dotenv");
const apigw = require("aws-cdk-lib/aws-apigateway");
const lambda = require("aws-cdk-lib/aws-lambda");
const events = require("aws-cdk-lib/aws-events");
const targets = require("aws-cdk-lib/aws-events-targets");
const path = require("path");
const env_1 = require("../utils/env");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
// import * as sqs from 'aws-cdk-lib/aws-sqs';
dotenv.config({ path: path.join(__dirname, "../../.env.stg") });
class BackendStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { DATABASE_URL, JWT_SECRET, AWS_COGNITO_CLIENT_ID, AWS_COGNITO_POOL_ID, 
        // AWS_REGION,
        AWS_COGNITO_CLIENT_SECRET, 
        // AWS_ACCESS_KEY_ID,
        // AWS_SECRET_ACCESS_KEY,
        AWS_S3_BUCKET_NAME, } = (0, env_1.getRequiredEnvVars)([
            "DATABASE_URL",
            "JWT_SECRET",
            "AWS_COGNITO_CLIENT_ID",
            "AWS_COGNITO_POOL_ID",
            // "AWS_REGION",
            "AWS_COGNITO_CLIENT_SECRET",
            // "AWS_ACCESS_KEY_ID",
            // "AWS_SECRET_ACCESS_KEY",
            "AWS_S3_BUCKET_NAME",
        ]);
        const apiFn = new lambda.Function(this, "AnimaliaBackend", {
            runtime: lambda.Runtime.PROVIDED_AL2023,
            handler: "bootstrap",
            code: lambda.Code.fromAsset(path.join(__dirname, "../../bin/api")),
            environment: {
                DATABASE_URL,
                JWT_SECRET,
                AWS_COGNITO_CLIENT_ID,
                AWS_COGNITO_POOL_ID,
                // AWS_REGION,
                AWS_COGNITO_CLIENT_SECRET,
                // AWS_ACCESS_KEY_ID,
                // AWS_SECRET_ACCESS_KEY,
                AWS_S3_BUCKET_NAME,
            },
        });
        new apigw.LambdaRestApi(this, "AnimaliaAPI", {
            handler: apiFn,
        });
        const dailyTaskFn = new lambda.Function(this, "DailyTaskCreator", {
            runtime: lambda.Runtime.PROVIDED_AL2023,
            handler: "bootstrap",
            code: lambda.Code.fromAsset(path.join(__dirname, "../../bin/dailytask")),
            environment: {
                DATABASE_URL,
                // ... 他の環境変数 ...
            },
            // IAMロールを明示的に設定
            role: new aws_iam_1.Role(this, 'DailyTaskCreatorRole', {
                assumedBy: new aws_iam_1.ServicePrincipal('lambda.amazonaws.com'),
                description: 'Role for DailyTaskCreator Lambda function',
                managedPolicies: [
                    // CloudWatchLogsへのアクセス権限
                    aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                ],
            }),
        });
        new events.Rule(this, "DailyTaskRule", {
            schedule: events.Schedule.cron({ minute: "0", hour: "15", day: "*" }),
            targets: [new targets.LambdaFunction(dailyTaskFn)],
        });
        // The code that defines your stack goes here
        // example resource
        // const queue = new sqs.Queue(this, 'AwsQueue', {
        //   visibilityTimeout: cdk.Duration.seconds(300)
        // });
    }
}
exports.BackendStack = BackendStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZC1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhY2tlbmQtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLGlDQUFpQztBQUNqQyxvREFBb0Q7QUFDcEQsaURBQWlEO0FBQ2pELGlEQUFpRDtBQUNqRCwwREFBMEQ7QUFFMUQsNkJBQThCO0FBQzlCLHNDQUFrRDtBQUNsRCxpREFBNEU7QUFDNUUsOENBQThDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFaEUsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLEVBQ0osWUFBWSxFQUNaLFVBQVUsRUFDVixxQkFBcUIsRUFDckIsbUJBQW1CO1FBQ25CLGNBQWM7UUFDZCx5QkFBeUI7UUFDekIscUJBQXFCO1FBQ3JCLHlCQUF5QjtRQUN6QixrQkFBa0IsR0FDbkIsR0FBRyxJQUFBLHdCQUFrQixFQUFDO1lBQ3JCLGNBQWM7WUFDZCxZQUFZO1lBQ1osdUJBQXVCO1lBQ3ZCLHFCQUFxQjtZQUNyQixnQkFBZ0I7WUFDaEIsMkJBQTJCO1lBQzNCLHVCQUF1QjtZQUN2QiwyQkFBMkI7WUFDM0Isb0JBQW9CO1NBQ3JCLENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUU7WUFDekQsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZTtZQUN2QyxPQUFPLEVBQUUsV0FBVztZQUNwQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDbEUsV0FBVyxFQUFFO2dCQUNYLFlBQVk7Z0JBQ1osVUFBVTtnQkFDVixxQkFBcUI7Z0JBQ3JCLG1CQUFtQjtnQkFDbkIsY0FBYztnQkFDZCx5QkFBeUI7Z0JBQ3pCLHFCQUFxQjtnQkFDckIseUJBQXlCO2dCQUN6QixrQkFBa0I7YUFDbkI7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUMzQyxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7WUFDaEUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZTtZQUN2QyxPQUFPLEVBQUUsV0FBVztZQUNwQixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUscUJBQXFCLENBQUMsQ0FBQztZQUN4RSxXQUFXLEVBQUU7Z0JBQ1gsWUFBWTtnQkFDWixpQkFBaUI7YUFDbEI7WUFDRCxnQkFBZ0I7WUFDaEIsSUFBSSxFQUFFLElBQUksY0FBSSxDQUFDLElBQUksRUFBRSxzQkFBc0IsRUFBRTtnQkFDM0MsU0FBUyxFQUFFLElBQUksMEJBQWdCLENBQUMsc0JBQXNCLENBQUM7Z0JBQ3ZELFdBQVcsRUFBRSwyQ0FBMkM7Z0JBQ3hELGVBQWUsRUFBRTtvQkFDZix5QkFBeUI7b0JBQ3pCLHVCQUFhLENBQUMsd0JBQXdCLENBQUMsMENBQTBDLENBQUM7aUJBQ25GO2FBQ0YsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVILElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFO1lBQ3JDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDckUsT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ25ELENBQUMsQ0FBQztRQUNILDZDQUE2QztRQUU3QyxtQkFBbUI7UUFDbkIsa0RBQWtEO1FBQ2xELGlEQUFpRDtRQUNqRCxNQUFNO0lBQ1IsQ0FBQztDQUNGO0FBN0VELG9DQTZFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5pbXBvcnQgKiBhcyBhcGlndyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXlcIjtcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyB0YXJnZXRzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZXZlbnRzLXRhcmdldHNcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuaW1wb3J0IHsgZ2V0UmVxdWlyZWRFbnZWYXJzIH0gZnJvbSBcIi4uL3V0aWxzL2VudlwiO1xuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSwgUm9sZSwgU2VydmljZVByaW5jaXBhbCB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XG4vLyBpbXBvcnQgKiBhcyBzcXMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNxcyc7XG5cbmRvdGVudi5jb25maWcoeyBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uLy4uLy5lbnYuc3RnXCIpIH0pO1xuXG5leHBvcnQgY2xhc3MgQmFja2VuZFN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3Qge1xuICAgICAgREFUQUJBU0VfVVJMLFxuICAgICAgSldUX1NFQ1JFVCxcbiAgICAgIEFXU19DT0dOSVRPX0NMSUVOVF9JRCxcbiAgICAgIEFXU19DT0dOSVRPX1BPT0xfSUQsXG4gICAgICAvLyBBV1NfUkVHSU9OLFxuICAgICAgQVdTX0NPR05JVE9fQ0xJRU5UX1NFQ1JFVCxcbiAgICAgIC8vIEFXU19BQ0NFU1NfS0VZX0lELFxuICAgICAgLy8gQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLFxuICAgICAgQVdTX1MzX0JVQ0tFVF9OQU1FLFxuICAgIH0gPSBnZXRSZXF1aXJlZEVudlZhcnMoW1xuICAgICAgXCJEQVRBQkFTRV9VUkxcIixcbiAgICAgIFwiSldUX1NFQ1JFVFwiLFxuICAgICAgXCJBV1NfQ09HTklUT19DTElFTlRfSURcIixcbiAgICAgIFwiQVdTX0NPR05JVE9fUE9PTF9JRFwiLFxuICAgICAgLy8gXCJBV1NfUkVHSU9OXCIsXG4gICAgICBcIkFXU19DT0dOSVRPX0NMSUVOVF9TRUNSRVRcIixcbiAgICAgIC8vIFwiQVdTX0FDQ0VTU19LRVlfSURcIixcbiAgICAgIC8vIFwiQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZXCIsXG4gICAgICBcIkFXU19TM19CVUNLRVRfTkFNRVwiLFxuICAgIF0pO1xuXG4gICAgY29uc3QgYXBpRm4gPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIFwiQW5pbWFsaWFCYWNrZW5kXCIsIHtcbiAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBST1ZJREVEX0FMMjAyMyxcbiAgICAgIGhhbmRsZXI6IFwiYm9vdHN0cmFwXCIsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuLi8uLi9iaW4vYXBpXCIpKSxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIERBVEFCQVNFX1VSTCxcbiAgICAgICAgSldUX1NFQ1JFVCxcbiAgICAgICAgQVdTX0NPR05JVE9fQ0xJRU5UX0lELFxuICAgICAgICBBV1NfQ09HTklUT19QT09MX0lELFxuICAgICAgICAvLyBBV1NfUkVHSU9OLFxuICAgICAgICBBV1NfQ09HTklUT19DTElFTlRfU0VDUkVULFxuICAgICAgICAvLyBBV1NfQUNDRVNTX0tFWV9JRCxcbiAgICAgICAgLy8gQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLFxuICAgICAgICBBV1NfUzNfQlVDS0VUX05BTUUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgbmV3IGFwaWd3LkxhbWJkYVJlc3RBcGkodGhpcywgXCJBbmltYWxpYUFQSVwiLCB7XG4gICAgICBoYW5kbGVyOiBhcGlGbixcbiAgICB9KTtcblxuICAgIGNvbnN0IGRhaWx5VGFza0ZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcIkRhaWx5VGFza0NyZWF0b3JcIiwge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUFJPVklERURfQUwyMDIzLFxuICAgICAgaGFuZGxlcjogXCJib290c3RyYXBcIixcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4uLy4uL2Jpbi9kYWlseXRhc2tcIikpLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgREFUQUJBU0VfVVJMLFxuICAgICAgICAvLyAuLi4g5LuW44Gu55Kw5aKD5aSJ5pWwIC4uLlxuICAgICAgfSxcbiAgICAgIC8vIElBTeODreODvOODq+OCkuaYjuekuueahOOBq+ioreWumlxuICAgICAgcm9sZTogbmV3IFJvbGUodGhpcywgJ0RhaWx5VGFza0NyZWF0b3JSb2xlJywge1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdsYW1iZGEuYW1hem9uYXdzLmNvbScpLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JvbGUgZm9yIERhaWx5VGFza0NyZWF0b3IgTGFtYmRhIGZ1bmN0aW9uJyxcbiAgICAgICAgbWFuYWdlZFBvbGljaWVzOiBbXG4gICAgICAgICAgLy8gQ2xvdWRXYXRjaExvZ3Pjgbjjga7jgqLjgq/jgrvjgrnmqKnpmZBcbiAgICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnc2VydmljZS1yb2xlL0FXU0xhbWJkYUJhc2ljRXhlY3V0aW9uUm9sZScpLFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBuZXcgZXZlbnRzLlJ1bGUodGhpcywgXCJEYWlseVRhc2tSdWxlXCIsIHtcbiAgICAgIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUuY3Jvbih7IG1pbnV0ZTogXCIwXCIsIGhvdXI6IFwiMTVcIiwgZGF5OiBcIipcIiB9KSxcbiAgICAgIHRhcmdldHM6IFtuZXcgdGFyZ2V0cy5MYW1iZGFGdW5jdGlvbihkYWlseVRhc2tGbildLFxuICAgIH0pO1xuICAgIC8vIFRoZSBjb2RlIHRoYXQgZGVmaW5lcyB5b3VyIHN0YWNrIGdvZXMgaGVyZVxuXG4gICAgLy8gZXhhbXBsZSByZXNvdXJjZVxuICAgIC8vIGNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZSh0aGlzLCAnQXdzUXVldWUnLCB7XG4gICAgLy8gICB2aXNpYmlsaXR5VGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzAwKVxuICAgIC8vIH0pO1xuICB9XG59XG4iXX0=